From af9edd2cd2853d88f61003c2371d73dae95874fa Mon Sep 17 00:00:00 2001
From: Lucas Russo <lerwys@gmail.com>
Date: Tue, 21 Feb 2017 17:42:55 -0300
Subject: [PATCH 3/6] NamingConventionTool: add Lnls Naming Convention

It's basically the same as ESS, but allowing
more characters (up to 12) in the device name.
---
 .../names/services/LnlsNamingConvention.java       | 269 +++++++++++++++++++++
 1 file changed, 269 insertions(+)
 create mode 100644 NamingConventionTool/src/main/java/org/openepics/names/services/LnlsNamingConvention.java

diff --git a/NamingConventionTool/src/main/java/org/openepics/names/services/LnlsNamingConvention.java b/NamingConventionTool/src/main/java/org/openepics/names/services/LnlsNamingConvention.java
new file mode 100644
index 0000000..8bf807e
--- /dev/null
+++ b/NamingConventionTool/src/main/java/org/openepics/names/services/LnlsNamingConvention.java
@@ -0,0 +1,269 @@
+/*-
+ * Copyright (c) 2014 European Spallation Source
+ * Copyright (c) 2014 Cosylab d.d.
+ *
+ * This file is part of Naming Service.
+ * Naming Service is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 2 of the License, or any newer version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
+ */
+
+package org.openepics.names.services;
+
+import javax.annotation.Nullable;
+import javax.ejb.Stateless;
+import javax.enterprise.inject.Alternative;
+import javax.inject.Inject;
+
+import org.openepics.names.business.NameElement;
+import org.openepics.names.business.NameType;
+
+import java.util.List;
+
+/**
+ * A naming convention definition used by LNLS.
+ *
+ * @author Marko Kolar
+ * @author Karin Rathsman
+ * @author Lucas Russo
+ */
+@Alternative
+@Stateless
+public class LnlsNamingConvention implements NamingConvention {
+
+    @Inject
+    NamingConventionDefinition aliasManager;
+
+    @Override
+    public boolean isMnemonicValid(List<String> mnemonicPath, NameType mnemonicType) {
+        MnemonicElement nameElement = new MnemonicElement(mnemonicPath, mnemonicType);
+        String mnemonic = nameElement.getMnemonic();
+        if (nameElement.isSuperSection()) {
+            return mnemonic.length() == 0 || (mnemonic.length() <= 3 && mnemonic.matches("^[a-zA-Z0-9]+$"));
+        } else if (nameElement.isRequired()) {
+            return (mnemonic.length() >= 1 && mnemonic.length() <= 12) && mnemonic.matches("^[a-zA-Z0-9]+$");
+        } else {
+            return mnemonic.length() == 0;
+//          return mnemonic.length() == 0 || ( mnemonic.length() <=16 && mnemonic.matches("^[a-zA-Z0-9]+$") );
+        }
+    }
+
+    @Override
+    public boolean isMnemonicRequired(List<String> mnemonicPath, NameType mnemonicType) {
+        return (new MnemonicElement(mnemonicPath, mnemonicType)).isRequired();
+    }
+
+    @Override
+    public boolean isInstanceIndexValid(List<String> sectionPath, List<String> deviceTypePath, @Nullable String instanceIndex) {
+        return isNameValid(instanceIndex, 0,12);
+    }
+
+    @Override
+    public String equivalenceClassRepresentative(@Nullable String name) {
+        return name != null ? name.toUpperCase().replaceAll("(?<=[A-Za-z])0+", "").replace('I', '1').replace('L', '1').replace('O', '0').replaceAll("(?<!\\d)0+(?=\\d)", "") : null;
+    }
+
+    @Override
+    public boolean canMnemonicsCoexist(List<String> mnemonicPath1, NameType mnemonicType1, List<String> mnemonicPath2, NameType mnemonicType2) {
+        MnemonicElement mnemonic1 = new MnemonicElement(mnemonicPath1, mnemonicType1);
+        MnemonicElement mnemonic2 = new MnemonicElement(mnemonicPath2, mnemonicType2);
+        return mnemonic1.canCoexistWith(mnemonic2);
+    }
+
+    @Override
+    public String conventionName(List<String> sectionPath, List<String> deviceTypePath, @Nullable String instanceIndex) {
+        String areaDefinition = (new MnemonicElement(sectionPath, NameType.AREA_STRUCTURE)).getDefinition();
+        String deviceDefinition = (new MnemonicElement(deviceTypePath, NameType.DEVICE_STRUCTURE)).getDefinition();
+        if (areaDefinition != null && deviceDefinition != null) {
+            return areaDefinition + ":" + deviceDefinition + (instanceIndex != null && !instanceIndex.isEmpty() ? "-" + instanceIndex : "");
+        } else {
+            return null;
+        }
+    }
+
+    @Override
+    public String conventionName(List<String> path, NameType type) {
+        return (new MnemonicElement(path, type).getDefinition());
+    }
+
+    private boolean isNameValid(String name, int nMin, int nMax) {
+        if ((name == null || name.length() == 0)) {
+            return nMin <= 0;
+        } else {
+            return (name.length() >= nMin && name.length() <= nMax) && name.matches("^[a-zA-Z0-9]+$");
+        }
+    }
+
+    @Override
+    public String getNamePartTypeName(List<String> sectionPath, @Nullable NameType namePartType) {
+        return namePartType != null ? (new MnemonicElement(sectionPath, namePartType)).getTypeName() : null;
+    }
+
+    @Override
+    public String getNamePartTypeMnemonic(List<String> sectionPath, @Nullable NameType namePartType) {
+        return namePartType != null ? (new MnemonicElement(sectionPath, namePartType)).getTypeMnemonic() : null;
+    }
+
+    @Override
+    public NameElement getNameElementDefinition(List<String> path, NameType nameType) {
+        return nameType != null && (nameType.isAreaStructure() || nameType.isDeviceStructure()) ? (new MnemonicElement(path, nameType)).getNameDefinition() : null;
+    }
+
+    @Override
+    public boolean canNamePartMove(List<String> sourcePath, NameType sourceNamePartType, List<String> destinationPath, NameType destinationNamePartType) {
+
+        return (new MnemonicElement(sourcePath, sourceNamePartType).canMoveTo(new MnemonicElement(destinationPath, destinationNamePartType)));
+    }
+
+    @Override
+    public String conventionKey(List<String> mnemonicPath, NameType nameType) {
+        return equivalenceClassRepresentative(conventionName(mnemonicPath, nameType));
+    }
+
+    private class MnemonicElement {
+
+        List<String> path;
+        boolean areaStructure;
+        boolean deviceStructure;
+        Integer level;
+
+        MnemonicElement(List<String> path, NameType type) {
+            this.path = path;
+            this.areaStructure = type.equals(NameType.AREA_STRUCTURE);
+            this.deviceStructure = type.equals(NameType.DEVICE_STRUCTURE);
+            this.level = !(path == null || path.isEmpty()) ? path.size() : 0;
+        }
+
+        public boolean canMoveTo(MnemonicElement nameElement) {
+            return (this.getTypeMnemonic().equals(nameElement.getTypeMnemonic()));
+        }
+
+        String getDefinition() {
+            if (isDeviceType()) {
+                return getDiscipline() + "-" + getDeviceType();
+            } else if (isSubsection()) {
+
+                if (!isOffsite()) {
+                    return getSection() + "-" + getSubsection();
+                } else {
+                    return getSuperSection() + "-" + getSection() + "-" + getSubsection();
+                }
+            } else {
+                return null;
+            }
+        }
+
+        NameElement getNameDefinition() {
+            if (deviceStructure) {
+                return aliasManager.deviceStructureLevel(level);
+            } else if (areaStructure) {
+                return aliasManager.areaStructureLevel(level);
+            } else {
+                return null;
+            }
+        }
+
+        String getTypeName() {
+            return getNameDefinition() != null ? getNameDefinition().getFullName() : "";
+        }
+
+        String getTypeMnemonic() {
+            return getNameDefinition() != null ? getNameDefinition().getMnemonic() : "";
+        }
+
+        boolean isDiscipline() {
+            return deviceStructure && level == 1;
+        }
+
+        boolean isDeviceGroup() {
+            return deviceStructure && level == 2;
+        }
+
+        boolean isDeviceType() {
+            return deviceStructure && level == 3;
+        }
+
+        boolean isSuperSection() {
+            return areaStructure && level == 1;
+        }
+
+        boolean isSection() {
+            return areaStructure && level == 2;
+        }
+
+        boolean isSubsection() {
+            return areaStructure && level == 3;
+        }
+
+        boolean isRequired() {
+            return !(isSuperSection() || isDeviceGroup());
+        }
+
+        boolean isReserved() {
+            return isDiscipline() || isSection();
+        }
+
+        boolean isOffsite() {
+            return areaStructure && !getSuperSection().isEmpty();
+        }
+
+        String getSuperSection() {
+            return isSuperSection() || isSection() || isSubsection() ? path.get(0) : null;
+        }
+
+        String getSection() {
+            return isSection() || isSubsection() ? path.get(1) : null;
+        }
+
+        String getDiscipline() {
+            return isDiscipline() || isDeviceGroup() || isDeviceType() ? path.get(0) : null;
+        }
+
+        String getSubsection() {
+            return isSubsection() ? path.get(2) : null;
+        }
+
+        String getDeviceType() {
+            return isDeviceType() ? path.get(2) : null;
+        }
+
+        String getMnemonic() {
+            return level > 0 ? path.get(level - 1) : null;
+        }
+
+        String getMnemonicCompare() {
+            return getMnemonic() != null || getMnemonic().isEmpty() ? getMnemonic().toUpperCase() : null;
+        }
+
+        boolean mnemonicEquals(MnemonicElement other) {
+            return getMnemonicCompare() != null && other.getMnemonicCompare() != null ? getMnemonicCompare().equals(other.getMnemonicCompare()) : false;
+        }
+
+        boolean canCoexistWith(MnemonicElement other) {
+            boolean sameSectionDifferentSuperSection = isSection() && other.isSection() && !getSuperSection().equals(other.getSuperSection());
+            boolean deviceWithSameNameAsDiscipline = isDiscipline() && other.isDeviceType() || isDeviceType() && other.isDiscipline();
+            if (isSuperSection() && other.isSuperSection() && isOffsite()) {
+                return false;
+            } else if (isReserved() && other.isReserved() && !sameSectionDifferentSuperSection) {
+                return false;
+            } else if ((isDeviceType() || isDiscipline()) && (other.isDeviceType() || other.isDiscipline()) && getDiscipline().equals(other.getDiscipline())) {
+                return false;
+            } else if ((isSubsection() || isSection()) && (other.isSubsection() || other.isSection()) && getSection().equals(other.getSection()) && getSuperSection().equals(other.getSuperSection())) {
+                return false;
+            } else if ((isReserved() && other.isRequired() || other.isReserved() && isRequired()) && mnemonicEquals(other) && !sameSectionDifferentSuperSection && !deviceWithSameNameAsDiscipline) {
+                return false;
+            } else {
+                return true;
+            }
+        }
+    }
+
+}
-- 
2.7.4

